#webdriver.driver=chrome
#webdriver.gecko.driver=E:\\geckodriver.exe
#webdriver.ie.driver=E:\\IEDriverServer.exe
#webdriver.edge.driver=E:\\MicrosoftWebDriver.exe
#webdriver.chrome.driver=E:\\chromedriver.exe
#webdriver.base.url=https://www.google.com
#webdriver.autodownload=false
#max.retries=4
#junit.retry.tests=true


serenity.project.name=API test Automation

#webdriver.driver = provided
#webdriver.provided.type = mydriver
#webdriver.provided.mydriver = com.utilities.CustomDriver
#thucydides.driver.capabilities = customdriver

# My Local Machine
#webdriver.firefox.profile=C:\\ReqresAPIResources\\apaag\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\seleniumProfile

#####################
#serenity.capability.types=capability,feature
#####################
#serenity.capability.types=module,epic,feature

#serenity.test.root=com.bestbuy.showcase.jbehave

#appium.newCommandTimeout = 80000
#appium.automationName = uiAutomator2
#appium.platformName = Android
#appium.browserName = chrome

# How long webdriver waits for elements to appear by default, in milliseconds.
#webdriver.timeouts.implicitlywait=10000

#use this property when running on actual android device
#serenity.restart.browser.for.each = NEVER

#using proxy (works only with Firefox)
# serenity.proxy.type=2
# serenity.proxy.http=http://proxy.host.com
# serenity.proxy.http_port=8080
#serenity.proxy.user=vi317308
#serenity.proxy.password=vicky@WL317308


# Default brand (Define Brand)
#####################
#brandType=Wiki

#metafilter=-skip
#####################

story.timeout.in.secs=5400

# Pause (in ms) between each test step.
#thucycides.step.delay=2000

# Set this property to have more finer control on how screenshots are taken. This property can take the following values:
# FOR_EACH_ACTION : Similar to serenity.verbose.screenshots
# BEFORE_AND_AFTER_EACH_STEP,
# AFTER_EACH_STEP, and
# FOR_FAILURES : Similar to serenity.only.save.failing.screenshots
#serenity.take.screenshots=AFTER_EACH_STEP

# Where should reports be generated.
#serenity.outputDirectory=

# Should serenity only store screenshots for failing steps? This can save disk space and speed up the tests a little. It is very useful for data-driven testing. This property is now deprecated. Use serenity.take.screenshots instead.
#serenity.only.save.failing.screenshots=

# Set this to true for saving screenshots at every web element action (like click(), typeAndEnter(), type(), typeAndTab() etc.). This property is now deprecated. Use serenity.take.screenshots instead.
#serenity.verbose.screenshots=

#Set this property to provide more detailed logging of WebElementFacade steps when tests are run.
#serenity.verbose.steps=

#During data-driven tests, some browsers (Firefox in particular) may slow down over time due to memory leaks. To get around this, you can get serenity to start a new browser session at regular intervals when it executes data-driven tests.
#serenity.restart.browser.frequency=0

# Useful if you are running Firefox tests against an HTTPS test server without a valid certificate. This will make serenity use a profile with the AssumeUntrustedCertificateIssuer property set.
#untrusted.certificates=

# How long should the driver wait for elements not immediately visible.
#serenity.timeout=10000

# Resize the browser to the specified dimensions, in order to take larger screenshots. This should work with Internet Explorer and Firefox, but not with Chrome.
# This doesn't work well with Chrome 
#serenity.browser.width=414
#serenity.browser.height=736

file.encoding=UTF8

#experimental


# Value in pixels. If set, screenshots are resized to this size. Useful to save space.
#serenity.resized.image.width=

# Set to true if you wish to save the original unscaled screenshots. This is set to false by default.
#serenity.keep.unscaled.screenshots=

 # Set this property to true to save the HTML source code of the screenshot web pages. This is set to false by default.
##serenity.store.html.source=

# The URL used to generate links to the issue tracking system.
#serenity.issue.tracker.url=

# Activate the Firebugs and FireFinder plugins for Firefox when running the WebDriver tests. This is useful for debugging, but is not recommended when running the tests on a build server.
#serenity.activate.firebugs=

# Defines batch strategy. Allowed values - DIVIDE_EQUALLY (default) and DIVIDE_BY_TEST_COUNT. DIVIDE_EQUALLY will simply divide the tests equally across all batches. This could be inefficient if the number of tests vary a lot between test classes. A DIVIDE_BY_TEST_COUNT strategy could be more useful in such cases as this will create batches based on number of tests.
#serenity.batch.strategy=

# If batch testing is being used, this is the size of the batches being executed.
#serenity.batch.count=

# If batch testing is being used, this is the number of the batch being run on this machine.
#serenity.batch.number=2

# Displays detailed step results in the test result tables. This property is set to false by default.
#thcydides.reports.show.step.details=

# Set this to run all web tests in a single browser.
#serenity.use.unique.browser=true

#serenity.locator.factory=

# Use this property to pass a semi-colon separated list of capabilities to the web driver.
#serenity.driver.capabilities=

# Set this to true to enable Java support in Firefox. By default, this is set to false as it slows down the web driver.
#security.enable_java=

# The base folder of the sub-module where the jBehave stories are kept. It is assumed that this directory contains sub folders src/test/resources. If this property is set, the requirements are read from src/test/resources under this folder instead of the classpath or working directory. This property is used to support situations where your working directory is different from the requirements base dir (for example when building a multi-module project from parent pom with requirements stored inside a sub-module)
#serenity.test.requirements.basedir=
#####################
#jbehave.thread = 16
#####################








#Imran----------
#webdriver.driver=

# If using a provided driver, what type is it.
# The implementation class needs to be defined in the webdriver.provided.{type} system property.
#webdriver.provided.type=

# The default starting URL for the application, and base URL for relative paths.
#webdriver.base.url=

# The URL to be used for remote drivers (including a selenium grid hub)
#webdriver.remote.url=

# What port to run PhantomJS on (used in conjunction with webdriver.remote.url to
# register with a Selenium hub, e.g. -Dphantomjs.webdriver=5555 -Dwebdriver.remote.url=http://localhost:4444
#phantomjs.webdriver.port=
 
# The driver to be used for remote drivers
#webdriver.remote.driver=

# A unique identifier for the project under test, used to record test statistics.
#serenity.project.key=

# The home directory for serenity output and data files - by default, $USER_HOME/.serenity
#serenity.home=

# Additional options to be added to the JDBC connection for the default file-based database.
#serenity.database.jdbc.options=

# Record test result statistics in a database for reporting purposes.
#serenity.record.statistics=

# Indicates a directory from which the resources for the HTML reports should be copied.
# This directory currently needs to be provided in a JAR file.
#serenity.report.resources=
serenity.report.encoding=UTF-8
serenity.reports.show.step.details=true

serenity.step.delay=10
# wait time for each step in millisecond


# Where should reports be generated.
#serenity.outputDirectory=

# Should serenity only store screenshots for failing steps?
# This can save disk space and speed up the tests somewhat. Useful for data-driven testing.
# @Deprecated This property is still supported, but serenity.take.screenshots provides more fine-grained control.
#serenity.only.save.failing.screenshots=

# A set of user-defined capabilities to be used to configure the WebDriver driver.
# Capabilities should be passed in as a semi-colon-separated list of key:value pairs, e.g.
# "build:build-1234; max-duration:300; single-window:true; tags:[tag1,tag2,tag3]"
#serenity.driver.capabilities=

# Should serenity take screenshots for every clicked button and every selected link?
# By default, a screenshot will be stored at the start and end of each step.
# If this option is set to true, serenity will record screenshots for any action performed
# on a WebElementFacade, i.e. any time you use an expression like element(...).click(),
# findBy(...).click() and so on.
# This will be overridden if the ONLY_SAVE_FAILING_SCREENSHOTS option is set to true.
# @Deprecated This property is still supported, but serenity.take.screenshots provides more fine-grained control.
#serenity.verbose.screenshots=

# If set to true, WebElementFacade events and other step actions will be logged to the console.
#serenity.verbose.steps=

# Fine-grained control over when screenshots are to be taken.
# This property accepts the following values:
# FOR_EACH_ACTION
# BEFORE_AND_AFTER_EACH_STEP
# AFTER_EACH_STEP
# FOR_FAILURES
#
#serenity.take.screenshots=

# Should serenity display detailed information in the test result tables.
# If this is set to true, test result tables will display a breakdown of the steps by result.
# This is false by default.
#serenity.reports.show.step.details=

# Restart the browser every so often during data-driven tests.
#serenity.restart.browser.frequency=

# Pause (in ms) between each test step.
#thucycides.step.delay=

# How long should the driver wait for elements not immediately visible, in seconds.
#serenity.timeout=

# Don't accept sites using untrusted certificates.
# By default, serenity accepts untrusted certificates - use this to change this behaviour.
#refuse.untrusted.certificates=

# Use the same browser for all tests (the "Highlander" rule)
#serenity.use.unique.browser=

# The estimated number of steps in a pending scenario.
# This is used for stories where no scenarios have been defined.
#serenity.estimated.average.step.count=

# The estimated number of tests in a typical story.
# Used to estimate functional coverage in the requirements reports.
#serenity.estimated.tests.per.requirement=

# Base URL for the issue tracking system to be referred to in the reports.
# If defined, any issues quoted in the form #1234 will be linked to the relevant
# issue in the issue tracking system. Works with JIRA, Trac etc.
#serenity.issue.tracker.url=

# Activate native events in Firefox.
# This is true by default, but can cause issues with some versions of linux.
#serenity.native.events=

# If the base JIRA URL is defined, serenity will build the issue tracker url using the standard JIRA form.
#jira.url=

# If defined, the JIRA project id will be prepended to issue numbers.
#jira.project=

# If defined, the JIRA username required to connect to JIRA.
#jira.username=

# If defined, the JIRA password required to connect to JIRA.
#jira.password=

# Base directory in which history files are stored.
#serenity.history=

# Redimension the browser to enable larger screenshots.
#serenity.browser.height=

# Redimension the browser to enable larger screenshots.
#serenity.browser.width=

# Value in pixels. If set, screenshots are resized to this size. Useful to save space.
#serenity.resized.image.width=

# Public URL where the serenity reports will be displayed.
# This is mainly for use by plugins.
#serenity.public.url=

# Activate the Firebugs plugin for firefox.
# Useful for debugging, but not very when running the tests on a build server.
# It is not activated by default.
#serenity.activate.firebugs=

# Enable applets in Firefox.
# Applets slow down webdriver, so are disabled by default.
#security.enable_java=
#serenity.activate.highlighting=

# Batch strategy to use for parallel batches.
# Allowed values - DIVIDE_EQUALLY (default) and DIVIDE_BY_TEST_COUNT
#serenity.batch.strategy=

# A deprecated property that is synonymous with serenity.batch.size
#serenity.batch.count#

# If batch testing is being used, this is the size of the batches being executed.
#serenity.batch.size=

# If batch testing is being used, this is the number of the batch being run on this machine.
#serenity.batch.number=

# HTTP Proxy URL configuration for Firefox and PhantomJS
#serenity.proxy.http"),

# HTTP Proxy port configuration for Firefox and PhantomJS
#serenity.proxy.http_port=

# HTTP Proxy type configuration for Firefox and PhantomJS
#serenity.proxy.type=

# HTTP Proxy username configuration for Firefox and PhantomJS
#serenity.proxy.user=

# HTTP Proxy password configuration for Firefox and PhantomJS
#serenity.proxy.password=

# How long webdriver waits for elements to appear by default, in milliseconds.
#webdriver.timeouts.implicitlywait=

# Extension packages. This is a list of packages that will be scanned for custom TagProvider implementations.
# To add a custom tag provider, just implement the TagProvider interface and specify the root package for this
# provider in this parameter.
#serenity.ext.packages=

# Arguments to be passed to the Chrome driver, separated by commas.
# chrome.switches=--disable-infobars
#chrome_experimental_options.excludeSwitches="[enable-automation]"
#chrome_experimental_options.useAutomationExtension=false
#chrome_experimental_options.mobileEmulation="["deviceName", "Pixel 2 XL"]"

#chrome.switches=--headless

# Preferences to be passed to the Firefox driver, separated by semi-colons (commas often appear in the preference values.
#firefox.preferences=

# Enable JQuery integration.
# If set to true (the default), JQuery will be injected into any page that does not already have it.
# You can turn this option off for performance reasons if you are not using JQuery selectors.
#serenity.jquery.integration=
#saucelabs.target.platform=
#saucelabs.driver.version=
#saucelabs.test.name=

# SauceLabs URL if running the web tests on SauceLabs
#saucelabs.url=

# SauceLabs access key - if provided, serenity can generate links to the SauceLabs reports that don't require a login.
#saucelabs.access.key=

# SauceLabs user id - if provided with the access key,
# serenity can generate links to the SauceLabs reports that don't require a login.
#saucelabs.user.id=

# Override the default implicit timeout value for the Saucelabs driver.
#saucelabs.implicit.timeout=


# Saucelabs records screenshots as well as videos by default. Since serenity also records screenshots,
# this feature is disabled by default. It can be reactivated using this system property.
#saucelabs.record.screenshots=

# Timeout (in seconds) for retrying file I/O.
# Used in net.serenity.core.resources.FileResources.copyResourceTo().
# Sometimes, file I/O fails on Windows machine due to the way Windows handles memory-mapped
# files (http://stackoverflow.com/questions/3602783/file-access-synchronized-on-java-object).
# This property, if set, will retry copying the resource till timeout. A default value is used
# if the property is not set.
#serenity.file.io.retry.timeout=

# Three levels are supported: QUIET, NORMAL and VERBOSE
serenity.logging=NORMAL

# The root package for the tests in a given project.
# If provided, serenity will log information about the total number of tests to be executed,
# and keep a tally of the executed tests. It will also use this as the root package when determining the
# capabilities associated with a test.
# If you are using the File System Requirements provider, serenity will expect this directory structure to exist
# at the top of the requirements tree. If you want to exclude packages in a requirements definition and start at a
# lower level in the hierarchy, use the serenity.requirement.exclusions property.
#serenity.test.root=

# Use this property if you need to completely override the location of requirements for the File System Provider.
#serenity.requirements.dir=

# Use this property if you need to completely override the location of requirements for the Annotated Provider.
# This is recommended if you use File System and Annotated provider simultaneously.
# The default value is stories.
#serenity.annotated.requirements.dir=

# Determine what the lowest level requirement (test cases, feature files, story files, should be
# called. 'Story' is used by default. 'feature' is a popular alternative.
#serenity.lowest.requirement.type=

# The hierarchy of requirement types.
# This is the list of requirement types to be used when reading requirements from the file system
# and when organizing the reports. It is a comma-separated list of tags.The default value is: capability, feature
#serenity.requirement.types=

# When deriving requirement types from a path, exclude any values from this comma-separated list.
#serenity.requirement.exclusions=

# Normally, serenity uses SmartElementLocatorFactory, an extension of the AjaxElementLocatorFactory
# when instantiating page objects. This is to ensure that web elements are available and usable before they are used.
# For alternative behaviour, you can set this value to DisplayedElementLocatorFactory, AjaxElementLocatorFactory or DefaultElementLocatorFactory.
#serenity.locator.factory=

# The hierarchy of capability types.
# This is the list of capability types to be used when reading capabilities from the file system
# and when organizing the reports. It is a comma-separated list of tags.The default value is: capability, feature
#serenity.data.dir=

# Allows you to override the default serenity.properties location for properties file.
#    PROPERTIES("properties"),
#serenity.statistics.driver_class=
#serenity.statistics.url=
#serenity.statistics.username=
#serenity.statistics.password=
#serenity.statistics.dialect=

# The base directory in which requirements are kept. It is assumed that this directory contains sub folders
# src/test/resources. If this property is set, the requirements are read from src/test/resources under this folder
# instead of the classpath or working directory. If you need to set an independent requirements directory that
# does not follow the src/test/resources convention, use serenity.requirements.dir instead

# This property is used to support situations where your working directory
# is different from the requirements base dir (for example when building a multi-module project from parent pom with
# requirements stored inside a sub-module : See Jira #serenity-100)
#serenity.test.requirements.basedir=

# Set to true if you want the HTML source code to be recorded as well as the screenshots.
# This is not currently used in the reports.
#serenity.store.html.source=

# If set to true, a copy of the original screenshot will be kept when screenshots are scaled for the reports.
# False by default to conserve disk space.
#serenity.keep.unscaled.screenshots=

# If provided, only classes and/or methods with tags in this list will be executed. The parameter expects
# a tag or comma-separated list of tags in the shortened form.
# For example, -Dtags="iteration:I1" or -Dtags="color:red,flavor:strawberry"
#    TAGS("tags"),

# Add extra columns to the CSV output, obtained from tag values.
#serenity.csv.extra.columns=

# Write the console headings using ascii-art ("ascii", default value) or in normal text ("normal")
serenity.console.headings=ascii
json.pretty.printing=true
serenity.console.colors=true

# If set to true, Asciidoc formatting will be supported in the narrative texts.
#narrative.format=

# Internal report format used when loading test outcome reports during aggregation - json or xml (xml by default)
#serenity.report.format=

# Path to PhantomJS executable
#phantomjs.binary.path=

# If set to true, don't format embedded tables in JBehave or Gherkin steps.
# False by default.
#ignore.embedded.tables=

# If set, this will define the list of tag types to appear on the dashboard screens
#dashboard.tag.list=

# If set, this will define the list of tag types to be excluded from the dashboard screens
#dashboard.excluded.tag.list=


# https://github.com/serenity-bdd/serenity-documentation/blob/master/src/asciidoc/system-props.adoc