    {
    	"store":
    	{
    		"book": [
                        {
                            "category": "reference",
                            "author": "Nigel Rees",
                            "title": "Sayings of the Century",
                            "price": 8.95
                        },
                        {
                            "category": "fiction",
                            "author": "Evelyn Waugh",
                            "title": "Sword of Honour",
                            "price": 12.99
                        },
                        {
                            "category": "fiction",
                            "author": "Herman Melville",
                            "title": "Moby Dick",
                            "isbn": "0-553-21311-3",
                            "price": 8.99
                        },
                        {
                            "category": "fiction",
                            "author": "J. R. R. Tolkien",
                            "title": "The Lord of the Rings",
                            "isbn": "0-395-19395-8",
                            "price": 22.99
                        }
    		        ],
    	"bicycle": {
    			"color": "red",
    			"price": 19.95
    		}
    	}
    }

// ----------------------------------------------------------------

    1. Collection Operations: ----------------------------------------------------------------
    def prices = jsonPath.get("store.book*.price") // Extract all book prices
    def totalPrice = prices.sum() // Calculate the sum of prices
    def averagePrice = prices.sum() / prices.size() // Calculate the average price

    2. Closure and Filtering: -----------------------------------------------------------------
    def expensiveBooks = jsonPath.get("store.book.findAll { it.price > 15 }")

    3. Transformation: ------------------------------------------------------------------------
    def bookTitles = jsonPath.get("store.book.title").collect { it.toUpperCase() }

    4. Dynamic Features: -----------------------------------------------------------------------
    def title = jsonPath.get("store.book[0].title")
    def price = jsonPath.get("store.book[0].price")

    5. String Interpolation: --------------------------------------------------------------------
    def bookIndex = 0
    def title = jsonPath.get("store.book[${bookIndex}].title")

    6. Integration with Java: -------------------------------------------------------------------

    def json = """
    {
      "store": {
        "book": [
          {
            "title": "Book 1",
            "price": 10.99
          },
          {
            "title": "Book 2",
            "price": 19.99
          }
        ],
        "bicycle": {
          "color": "red",
          "price": 129.99
        }
      }
    }
    """

    def jsonPath = JsonPath.from(json)

    def expensiveBooks = jsonPath.get("store.book.findAll { it.price > 15 }")
    def totalPrice = jsonPath.get("store.book*.price.sum()")

    println "Expensive Books: $expensiveBooks"
    println "Total Price: $totalPrice"

    1. Safe Navigation Operator (?.):
    def title = jsonPath.get("store.book[5]?.title")

    2. Dynamic Method Invocation:
    def method = "toUpperCase"
    def title = jsonPath.get("store.book[0].title").invokeMethod(method)

    3. JsonSlurper:
    def jsonSlurper = new groovy.json.JsonSlurper()
    def jsonData = jsonSlurper.parseText(json)
    def bookTitles = jsonData.store.book.collect { it.title }

    4. Destructuring Assignment:
    def (firstTitle, secondTitle) = jsonPath.get("store.book*.title")

    5. Spread Operator (*.):
    def allTitles = jsonPath.get("store.book*.title.flatten()")

    6. JsonBuilder:
    def jsonBuilder = new groovy.json.JsonBuilder()

    def book = [
        title: "New Book",
        price: 29.99
    ]

    def jsonString = jsonBuilder {
        store {
            book book
        }
    }

    println jsonString

    7. Metaprogramming:
    String.metaClass.reverse = { -> delegate.reverse() }
    def reversedTitle = jsonPath.get("store.book[0].title".reverse())

// ----------------------------------------------------------------------------------------
    XPath	JSONPath	    Description
    /	    $	            the root object/element
    .	    @	            the current object/element
    /	    . or []	        child operator
    ..	    n/a	            parent operator
    //	    ..	            recursive descent. JSONPath borrows this syntax from E4X.
    *	    * wildcard.     All objects/elements regardless their names.
    @	    n/a	attribute access. JSON structures don't have attributes.
    []	    []	subscript operator. XPath uses it to iterate over element collections and for predicates. In Javascript and JSON it is the native array operator.
    |	    [,]	Union operator in XPath results in a combination of node sets. JSONPath allows alternate names or array indices as a set.
    n/a	    [start:end:step]	array slice operator borrowed from ES4.
    []	    ?()	            applies a filter (script) expression.
    n/a	    ()	            script expression, using the underlying script engine.
    ()	    n/a	            grouping in Xpath

// ----------------------------------------------------------------------------------------

    Function	    Description	                                        Output type
    min()	        Provides the min value of an array of numbers	    Double
    max()	        Provides the max value of an array of numbers	    Double
    avg()	        Provides the average value of an array of numbers	Double
    stddev()	    Provides the standard deviation value of an array of numbers	Double
    length()	    Provides the length of an array	Integer
    sum()	        Provides the sum value of an array of numbers	Double
    keys()	        Provides the property keys (An alternative for terminal tilde ~)	Set<E>
    concat(X)	    Provides a concatinated version of the path output with a new item	like input
    append(X)	    add an item to the json path output array	like input
    first()	        Provides the first item of an array	Depends on the array
    last()	        Provides the last item of an array	Depends on the array
    index(X)	    Provides the item of an array of index: X, if the X is negative, take from backwards	Depends on the array

// ----------------------------------------------------------------------------------------

    Filters are logical expressions used to filter arrays.
    A typical filter would be [?(@.age > 18)] where @ represents the current item being processed.
    More complex filters can be created with logical operators && and ||.
    String literals must be enclosed by single or double quotes ([?(@.color == 'blue')] or [?(@.color == "blue")]).

    Operator	Description
    ==	        left is equal to right (note that 1 is not equal to '1')
    !=	        left is not equal to right
    <	        left is less than right
    <=	        left is less or equal to right
    >	        left is greater than right
    >=	        left is greater than or equal to right
    =~	        left matches regular expression [?(@.name =~ /foo.*?/i)]
    in	        left exists in right [?(@.size in ['S', 'M'])]
    nin	        left does not exists in right
    subsetof	left is a subset of right [?(@.sizes subsetof ['S', 'M', 'L'])]
    anyof	    left has an intersection with right [?(@.sizes anyof ['M', 'L'])]
    noneof	    left has no intersection with right [?(@.sizes noneof ['M', 'L'])]
    size	    size of left (array or string) should match right
    empty	    left (array or string) should be empty

// ----------------------------------------------------------------------------------------
    http://groovy-lang.org/processing-xml.html#_gpath
    https://json-everything.net/json-path
// ----------------------------------------------------------------------------------------