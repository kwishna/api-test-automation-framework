import org.gradle.api.tasks.testing.logging.TestLogEvent

buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
}

plugins {
    id 'java'
}

repositories {
    mavenCentral()
    mavenLocal()
}

group = 'devils.dare'
version = '0.0.1-SNAPSHOT'

//java {
//    sourceCompatibility = JavaVersion.VERSION_17
//    targetCompatibility = JavaVersion.VERSION_17
//}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

//tasks {
//    compileTestJava {
//        sourceCompatibility = JavaVersion.VERSION_17
//        targetCompatibility = JavaVersion.VERSION_17
//    }
//}

ext {
    serenity_version = '4.1.20'
    junit_platform_launcher_version = "1.10.2"
    cucumber_junit_platform_engine_version = "7.16.1"
    junit_platform_suite_version = "1.10.2"
    junit_jupiter_engine_version = "5.10.2"
    junit_vintage_engine_version = "5.10.2"
    logback_classic_version = "1.2.10"
    assertj_core_version = "3.23.1"
    cucumber_version = "7.18.0"

//    cucumberTags = System.getProperty('cucumber.tags', '@smoke')
}

dependencies {
    dependencies {
        implementation "net.serenity-bdd:serenity-rest-assured:${serenity_version}"
        implementation "net.serenity-bdd:serenity-core:${serenity_version}"
//        implementation "net.serenity-bdd:serenity-cucumber:${serenity_version}"
//        implementation "net.serenity-bdd:serenity-screenplay:${serenity_version}"
//        implementation "net.serenity-bdd:serenity-screenplay-webdriver:${serenity_version}"
//        implementation "net.serenity-bdd:serenity-ensure:${serenity_version}"
//        implementation "net.serenity-bdd:serenity-junit5:${serenity_version}"
        implementation "io.cucumber:cucumber-java:${cucumber_version}"
//        implementation "io.cucumber:cucumber-junit-platform-engine:${cucumber_junit_platform_engine_version}"
        implementation 'io.cucumber:cucumber-testng:7.18.0'
        implementation "io.cucumber:cucumber-picocontainer:7.18.0"
        implementation "ch.qos.logback:logback-classic:${logback_classic_version}"
        implementation "org.assertj:assertj-core:${assertj_core_version}"
        implementation "org.apache.commons:commons-collections4:4.5.0-M1"
        implementation "commons-io:commons-io:2.16.1"
        implementation "org.apache.commons:commons-csv:1.7"
        implementation "org.apache.commons:commons-lang3:3.14.0"
        implementation "org.apache.commons:commons-csv:1.11.0"
        implementation "org.apache.logging.log4j:log4j-core:2.23.1"
        implementation "org.apache.logging.log4j:log4j-api:2.23.1"
        implementation 'org.projectlombok:lombok:1.18.32'
        implementation 'jakarta.validation:jakarta.validation-api:3.1.0'
        implementation 'org.aeonbits.owner:owner-java8:1.0.12'
        implementation 'org.apache.poi:poi:5.2.5'
        implementation 'org.apache.poi:poi-ooxml:5.2.5'
        implementation 'com.aventstack:extentreports:5.1.1'
        implementation 'net.datafaker:datafaker:2.2.2'
        implementation 'tech.grasshopper:extentreports-cucumber7-adapter:1.14.0'
        implementation 'io.rest-assured:json-schema-validator:5.4.0'
        implementation 'org.wiremock:wiremock:3.6.0'
        implementation 'com.codoid.products:fillo:1.22'
        implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.17.1'
        implementation 'com.fasterxml.jackson.core:jackson-databind:2.17.1'
        implementation 'com.fasterxml.jackson.core:jackson-core:2.17.1'
        implementation 'com.fasterxml:jackson-xml-databind:0.6.2'

        // If TestNG
        implementation 'org.testng:testng:7.10.2'

        // If using JUnit Jupiter
//        implementation 'org.junit.jupiter:junit-jupiter:5.9.2'
//        implementation "org.junit.platform:junit-platform-launcher:${junit_platform_suite_version}"
//        implementation "org.junit.platform:junit-platform-suite:${junit_platform_suite_version}"

        // If using JUnit Vintage
//        testCompileOnly 'junit:junit:4.13.2'
//        testRuntimeOnly 'org.junit.vintage:junit-vintage-engine:5.9.2'
//        testRuntimeOnly 'org.junit.platform:junit-platform-launcher:1.10.2'

        // If using JUnit 4
//        implementation 'junit:junit:4.13.2'

    }
}

// set system environment using a file
def loadPropertiesFile() {
    def env = project.hasProperty('test.env') ? project.property('test.env') : 'QA'
    def propertiesFile = file("${project.rootDir}/src/test/resources/configs/${env}.properties")

    if (propertiesFile.exists()) {
        def props = new Properties()
        propertiesFile.withInputStream { stream ->
            props.load(stream)
        }
        props.each { key, value ->
            System.setProperty(key as String, value as String)
        }
    } else {
        throw new GradleException("Properties file for environment '${env}' not found at ${propertiesFile.asPath}")
    }
}

tasks.register('ng', Test) {
    doFirst {
        loadPropertiesFile()
    }
    useTestNG {
//        preserveOrder true
//        excludeGroups 'integrationTests'
//        includeGroups 'unitTests'
//        useDefaultListeners = true // Tells TestNG to execute its default reporting structure
        suites "testng.xml"
//        include "**/*TestNGRunner*"
//        testLogging.showStandardStreams = true
    }
    testLogging {
        showStandardStreams = true
        events TestLogEvent.FAILED, TestLogEvent.PASSED, TestLogEvent.SKIPPED
    }
    maxParallelForks = 8
    afterTest { desc, result ->
        logger.quiet "Executing test ${desc.name} [${desc.className}] with result: ${result.resultType}"
    }
}

tasks.register('t', Test) {
    useTestNG {
        suites "./src/test/resources/suites/testng.xml"
    }
}

//tasks.withType(Test).configureEach {
//    doFirst {
//        systemProperties System.getProperties()
//    }
//}

//gradle.startParameter.continueOnFailure = true

//test.finalizedBy(aggregate)